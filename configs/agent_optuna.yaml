# Agent Multi-Objectives sweeper
# Get conf by running --cfg job --resolve

# State selector choices, env/datasource/state_selector:
# df_fullrandom - Choix David D avec HSLinUCB mais pb. singular matrix avec KFOO
# df_randombuffer 
# df_sequential - At each reset choose the workload from the current episode index, go to the top or bottom state of the workload as specified by topdown argument.
# df_fullsequential - Choix PR, Optmal? - Start at the begining of the dataset and go to the next state at each reset. When bottom state is reached, next reset will go to the next workload (auto rewind)
# df_topdownrocker - Especially for tests Start sequentialy each workload twice. First from Top, second from Bottom
# df_randomtopdown - Starts randomly at each Reset from Top buffer value or Bottom buffer value
# db_live - Connected to a live database, at each reset do not touch the buffer value

# All agents:
# linucb_kfoo (LinUCB)
# linucb_hs   (HSLinUCB, i.e. HorizontalScaling LinUCB)
# ppo
# dqn
# a2c
# sac
# ddpg

# python run_agent.py --cfg job agent/env/state_selector@agent.env.state_selector_train=df_topdownrocker

defaults:
  - agent  
  - override /hydra/sweeper: optuna
  - _self_

n_trials: 3
hydra_launcher_n_jobs: 4

# Defaults job & Sweeper configuration
hydra:
  launcher:
    n_jobs: ${hydra_launcher_n_jobs}
    prefer: threads
  sweep:
    subdir: ${hydra:job.name}${hydra.job.num}-${hydra.job.override_dirname}
  sweeper:
    study_name: banditsnco
    n_trials: ${n_trials}
    n_jobs: ${hydra_launcher_n_jobs}
    sampler:
      seed: ${RND_SEED}
      multivariate: True
#      constant_liar: True
    direction: 
    - minimize # Minimize the value of the (inverted) evaluations performance returned by the run() function
